{"version":3,"sources":["Container/Header.js","Container/Content.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Content","props","useState","disease_name","propbility","record_prediction","modal_load_complete","state","setState","model","results","imageURL","setImageURL","imageRef","useRef","inputRef","TARGET_CLASSES","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","useEffect","identify","a","console","log","tensor","tf","fromPixels","current","resizeNearestNeighbor","expandDims","toFloat","reverse","predict","data","predictions","finalData","Array","from","map","p","i","probability","sort","b","slice","toFixed","style","marginTop","src","alt","ref","width","height","type","accept","capture","onChange","event","target","files","length","url","URL","createObjectURL","setTimeout","key","marginLeft","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qOAeeA,MAbf,WACI,OAAQ,oCACJ,6BACI,yBAAKC,UAAU,8BACX,yBAAKA,UAAU,aACf,wBAAIA,UAAU,cAAd,gC,oECwMDC,MAxMf,SAAiBC,GAAQ,IAAD,EACMC,mBAAS,CAC/BC,aAAc,IACdC,WAAY,IACZC,mBAAmB,EACnBC,qBAAqB,IALL,mBACbC,EADa,KACNC,EADM,OAOMN,mBAAS,MAPf,mBAObO,EAPa,aAQUP,mBAAS,KARnB,mBAQbQ,EARa,aASYR,mBAAS,OATrB,mBASbS,EATa,KASHC,EATG,KAUdC,EAAWC,mBACXC,EAAWD,mBAGXE,EAAiB,CACnBC,EAAG,iBACHC,EAAG,YACHC,EAAG,sCACHC,EAAG,cACHC,EAAG,eACHC,EAAG,uBACHC,EAAG,kCACHC,EAAG,UACHC,EAAG,cACHC,EAAG,qCACHC,GAAI,YACJC,GAAI,cACJC,GAAI,eACJC,GAAI,uBACJC,GAAI,iBACJC,GAAI,OACJC,GAAI,OACJC,GAAI,qBACJC,GAAI,uCACJC,GAAI,0BACJC,GAAI,cACJC,GAAI,0BAMRC,qBAAU,cAIP,IAKH,IAyCMC,EAAQ,uCAAG,sCAAAC,EAAA,6DAGbC,QAAQC,IAAI,oBACRC,EAASC,IAAWC,WAAWjC,EAASkC,QAAS,GAChDC,sBAAsB,CAAC,IAAK,MAC5BC,aACAC,UACAC,SAAS,GARD,SAUW1C,EAAM2C,QAAQR,GAAQS,OAVjC,OAUTC,EAVS,OAWbZ,QAAQC,IAAIW,GAERC,EAAYC,MAAMC,KAAKH,GACtBI,KAAI,SAAUC,EAAGC,GACd,MAAO,CACHC,YAAaF,EACb5D,UAAW6D,MAEhBE,MAAK,SAAUrB,EAAGsB,GACjB,OAAOA,EAAEF,YAAcpB,EAAEoB,eAC1BG,MAAM,EAAG,GAGhBtB,QAAQC,IAAIY,EAAU,GAAI,uBAxBb,EA0BsBA,EAAU,GAArCM,EA1BK,EA0BLA,YAAa9D,EA1BR,EA0BQA,UAIrBS,GAAS,SAACD,GAAD,mBAAC,eACHA,GADE,IAELF,mBAAmB,EACnBF,aAAca,EAAejB,GAC7BK,WAAW,GAAD,QAAoB,IAAdyD,GAAmBI,QAC/B,GADM,UAlCD,4CAAH,qDA2Cd,OAAQ,oCACJ,yBAAKlE,UAAU,YAAYmE,MAAO,CAAEC,UAAW,KAC3C,yBAAKpE,UAAU,OAGX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,aACX,yBAAKqE,IAAiB,MAAZzD,EAAmBA,EAAW,qBACpC0D,IAAI,iBAAiBC,IAAKzD,EAAUqD,MAAO,CAAEK,MAAO,QAAUC,OAAO,QAEzE,yBAAKzE,UAAU,sBAAsBmE,MAAO,CAAEC,UAAW,QACrD,2BACIpE,UAAU,kBACV0E,KAAK,OACLC,OAAO,UACPC,QAAQ,SACRC,SApGP,SAAAC,GAEjB,GADkBA,EAAMC,OAAhBC,MACEC,OAAS,EAAG,CAClBtC,QAAQC,IAAIkC,EAAMC,OAAOC,MAAM,GAAI,YACnC,IAAME,EAAMC,IAAIC,gBAAgBN,EAAMC,OAAOC,MAAM,IAGnDvE,GAAS,SAACD,GAAD,mBAAC,eACHA,GADE,IAELF,mBAAmB,OAGvBO,EAAYqE,GACZG,YAAW,WAAc5C,MAAc,OAwFnB8B,IAAKvD,EACLmD,MAAO,CAAEK,MAAO,aAKhC,yBAAKxE,UAAU,YACX,yBAAKA,UAAU,gBAEX,4BACKW,EAAQgD,KAAI,gBAAG3D,EAAH,EAAGA,UAAW8D,EAAd,EAAcA,YAAd,OACT,wBAAIwB,IAAKtF,GAAT,UAAwBA,EAAxB,eAAsD,IAAd8D,GAAmBI,QACvD,SAKZ,yBAAKlE,UAAU,aACX,4CAAkBQ,EAAMF,mBACpB,yBAAKN,UAAU,+BAA+BmE,MAAO,CAAEoB,WAAY,WAIvE,yBAAKvF,UAAU,oBACX,2BAAOA,UAAU,yBAAyBwF,GAAG,4BACzC,+BACI,4BACI,8CACA,4BAAKhF,EAAMJ,eAEf,4BACI,wDACA,4BAAKI,EAAMH,uBC5KxCoF,MAZf,WACE,OACE,6BACE,kBAAC,EAAD,MAIC,kBAAC,EAAD,QCFaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAMC,a","file":"static/js/main.d8124135.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n    return (<>\n        <div>\n            <nav className=\"navbar navbar-dark bg-dark\">\n                <div className=\"container\">\n                <h1 className=\"heade_text\">Plant Diseases Detector</h1>\n                </div>\n            </nav>\n        </div>\n    </>\n    );\n}\n\nexport default Header;","import React, { useState, useEffect, useRef } from 'react';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as tf from '@tensorflow/tfjs';\nimport Loader from 'react-loader-spinner';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\n\nfunction Content(props) {\n    const [state, setState] = useState({\n        disease_name: '-',\n        propbility: '-',\n        record_prediction: false,\n        modal_load_complete: false\n    })\n    const [model, setModel] = useState(null);\n    const [results, setResults] = useState([]);\n    const [imageURL, setImageURL] = useState(null);\n    const imageRef = useRef();\n    const inputRef = useRef();\n\n\n    const TARGET_CLASSES = {\n        0: \"Bacterial_spot\",\n        1: \"Black_rot\",\n        2: \"Cercospora_leaf_spot Gray_leaf_spot\",\n        3: \"Common_rust\",\n        4: \"Early_blight\",\n        5: \"Esca_(Black_Measles)\",\n        6: \"Haunglongbing_(Citrus_greening)\",\n        7: \"healthy\",\n        8: \"Late_blight\",\n        9: \"Leaf_blight_(Isariopsis_Leaf_Spot)\",\n        10: \"Leaf_Mold\",\n        11: \"Leaf_scorch\",\n        12: \"mosaic_virus\",\n        13: \"Northern_Leaf_Blight\",\n        14: \"Powdery_mildew\",\n        15: \"rust\",\n        16: \"scab\",\n        17: \"Septoria_leaf_spot\",\n        18: \"Spider_mites Two-spotted_spider_mite\",\n        19: \"Squash___Powdery_mildew\",\n        20: \"Target_Spot\",\n        21: \"Yellow_Leaf_Curl_Virus\"\n    };\n\n\n\n\n    useEffect(() => {\n\n        //loadModel();\n        // code to run on component mount\n    }, [])\n\n\n    //const upload = () => inputRef.current.click();\n\n    const handleUpload = event => {\n        const { files } = event.target;\n        if (files.length > 0) {\n            console.log(event.target.files[0], \"----file\");\n            const url = URL.createObjectURL(event.target.files[0]);\n\n\n            setState((state) => ({\n                ...state,\n                record_prediction: true\n            }));\n\n            setImageURL(url);\n            setTimeout(function () { identify() }, 100);\n        }\n    };\n\n    const loader = () => {\n        return <Loader\n            type=\"BallTriangle\"\n            color=\"#00BFFF\"\n            height={100}\n            width={100}\n            timeout={3000} //3 secs\n\n        />\n    }\n\n    const loadModel = async () => {\n\n        //const model = await mobilenet.load();\n        const model = await tf.loadGraphModel('/model/model.json');\n        console.log(model);\n        setModel(model);\n\n        setState((state) => ({\n            ...state,\n            modal_load_complete: true\n        }));\n    };\n\n    const identify = async () => {\n        //const results = await model.classify(imageRef.current);\n\n        console.log(\"Loading image...\");\n        let tensor = tf.browser.fromPixels(imageRef.current, 3)\n            .resizeNearestNeighbor([224, 224]) // change the image size\n            .expandDims()\n            .toFloat()\n            .reverse(-1); // RGB -> BGR\n\n        let predictions = await model.predict(tensor).data();\n        console.log(predictions);\n\n        let finalData = Array.from(predictions)\n            .map(function (p, i) { // this is Array.map\n                return {\n                    probability: p,\n                    className: i\n                };\n            }).sort(function (a, b) {\n                return b.probability - a.probability;\n            }).slice(0, 1);\n\n\n        console.log(finalData[0], \"----matched records\");\n\n        const { probability, className } = finalData[0];\n\n\n\n        setState((state) => ({\n            ...state,\n            record_prediction: false,\n            disease_name: TARGET_CLASSES[className],\n            propbility: `${(probability * 100).toFixed(\n                2\n            )}%`,\n        }));\n\n\n        //setResults(top5);\n\n    };\n    return (<>\n        <div className=\"container\" style={{ marginTop: 30 }}>\n            <div className=\"row\">\n\n\n                <div className=\"col-md-6\">\n                    <div className=\"col-md-12\">\n                        <img src={imageURL != null ? imageURL : '/maxresdefault.jpg'}\n                            alt=\"upload-preview\" ref={imageRef} style={{ width: \"100%\" }} height=\"300\" />\n\n                        <div className=\"select-image-upload\" style={{ marginTop: '0px' }} >\n                            <input\n                                className=\"btn btn-warning\"\n                                type=\"file\"\n                                accept=\"image/*\"\n                                capture=\"camera\"\n                                onChange={handleUpload}\n                                ref={inputRef}\n                                style={{ width: \"100%\" }}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-md-6\">\n                    <div className=\"text-center1\">\n\n                        <ul>\n                            {results.map(({ className, probability }) => (\n                                <li key={className}>{`${className}: %${(probability * 100).toFixed(\n                                    2\n                                )}`}</li>\n                            ))}\n                        </ul>\n\n                        <div className=\"col-md-12\">\n                            <h2>Predictions  {state.record_prediction &&\n                                <div className=\"spinner-grow spinner-grow-sm\" style={{ marginLeft: '10px' }}></div>}\n                            </h2>\n\n\n                            <div className=\"table-responsive\">\n                                <table className=\"table table-borderless\" id=\"table_disease_prediction\">\n                                    <tbody>\n                                        <tr>\n                                            <td>Disease Name :</td>\n                                            <td>{state.disease_name}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>Probebility Percentage :</td>\n                                            <td>{state.propbility}</td>\n                                        </tr>\n\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    </>\n    );\n}\n\nexport default Content;","import React from 'react';\nimport './App.css';\n// import InputFileReader from './components/fileReader';\n// import ImportFromFileBodyComponent from './components/fileReader2';\nimport Header from './Container/Header';\nimport Content from './Container/Content';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      {/* <InputFileReader />\n      <br />\n      <ImportFromFileBodyComponent /> */}\n       <Content />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}